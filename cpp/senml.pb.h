// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: senml.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_senml_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_senml_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_senml_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_senml_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_senml_2eproto;
namespace senml_protobuf {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
}  // namespace senml_protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::senml_protobuf::Message* Arena::CreateMaybeMessage<::senml_protobuf::Message>(Arena*);
template<> ::senml_protobuf::Record* Arena::CreateMaybeMessage<::senml_protobuf::Record>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace senml_protobuf {

// ===================================================================

class Record :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senml_protobuf.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Record& default_instance();

  enum BaseValueOptionalCase {
    kBaseValue = 5,
    BASEVALUEOPTIONAL_NOT_SET = 0,
  };

  enum BaseSumOptionalCase {
    kBaseSum = 6,
    BASESUMOPTIONAL_NOT_SET = 0,
  };

  enum ValueOneofCase {
    kValue = 11,
    kStringValue = 12,
    kDataValue = 13,
    kBoolValue = 14,
    VALUEONEOF_NOT_SET = 0,
  };

  enum SumOptionalCase {
    kSum = 15,
    SUMOPTIONAL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(nullptr);
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senml_protobuf.Record";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_senml_2eproto);
    return ::descriptor_table_senml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseNameFieldNumber = 1,
    kBaseUnitFieldNumber = 3,
    kNameFieldNumber = 7,
    kUnitFieldNumber = 8,
    kBaseTimeFieldNumber = 2,
    kTimeFieldNumber = 9,
    kBaseVersionFieldNumber = 4,
    kUpdateTimeFieldNumber = 10,
    kBaseValueFieldNumber = 5,
    kBaseSumFieldNumber = 6,
    kValueFieldNumber = 11,
    kStringValueFieldNumber = 12,
    kDataValueFieldNumber = 13,
    kBoolValueFieldNumber = 14,
    kSumFieldNumber = 15,
  };
  // string baseName = 1;
  void clear_basename();
  const std::string& basename() const;
  void set_basename(const std::string& value);
  void set_basename(std::string&& value);
  void set_basename(const char* value);
  void set_basename(const char* value, size_t size);
  std::string* mutable_basename();
  std::string* release_basename();
  void set_allocated_basename(std::string* basename);
  private:
  const std::string& _internal_basename() const;
  void _internal_set_basename(const std::string& value);
  std::string* _internal_mutable_basename();
  public:

  // string baseUnit = 3;
  void clear_baseunit();
  const std::string& baseunit() const;
  void set_baseunit(const std::string& value);
  void set_baseunit(std::string&& value);
  void set_baseunit(const char* value);
  void set_baseunit(const char* value, size_t size);
  std::string* mutable_baseunit();
  std::string* release_baseunit();
  void set_allocated_baseunit(std::string* baseunit);
  private:
  const std::string& _internal_baseunit() const;
  void _internal_set_baseunit(const std::string& value);
  std::string* _internal_mutable_baseunit();
  public:

  // string name = 7;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string unit = 8;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // double baseTime = 2;
  void clear_basetime();
  double basetime() const;
  void set_basetime(double value);
  private:
  double _internal_basetime() const;
  void _internal_set_basetime(double value);
  public:

  // double time = 9;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // int32 baseVersion = 4;
  void clear_baseversion();
  ::PROTOBUF_NAMESPACE_ID::int32 baseversion() const;
  void set_baseversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_baseversion() const;
  void _internal_set_baseversion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double updateTime = 10;
  void clear_updatetime();
  double updatetime() const;
  void set_updatetime(double value);
  private:
  double _internal_updatetime() const;
  void _internal_set_updatetime(double value);
  public:

  // double baseValue = 5;
  private:
  bool _internal_has_basevalue() const;
  public:
  void clear_basevalue();
  double basevalue() const;
  void set_basevalue(double value);
  private:
  double _internal_basevalue() const;
  void _internal_set_basevalue(double value);
  public:

  // double baseSum = 6;
  private:
  bool _internal_has_basesum() const;
  public:
  void clear_basesum();
  double basesum() const;
  void set_basesum(double value);
  private:
  double _internal_basesum() const;
  void _internal_set_basesum(double value);
  public:

  // double value = 11;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // string stringValue = 12;
  private:
  bool _internal_has_stringvalue() const;
  public:
  void clear_stringvalue();
  const std::string& stringvalue() const;
  void set_stringvalue(const std::string& value);
  void set_stringvalue(std::string&& value);
  void set_stringvalue(const char* value);
  void set_stringvalue(const char* value, size_t size);
  std::string* mutable_stringvalue();
  std::string* release_stringvalue();
  void set_allocated_stringvalue(std::string* stringvalue);
  private:
  const std::string& _internal_stringvalue() const;
  void _internal_set_stringvalue(const std::string& value);
  std::string* _internal_mutable_stringvalue();
  public:

  // string dataValue = 13;
  private:
  bool _internal_has_datavalue() const;
  public:
  void clear_datavalue();
  const std::string& datavalue() const;
  void set_datavalue(const std::string& value);
  void set_datavalue(std::string&& value);
  void set_datavalue(const char* value);
  void set_datavalue(const char* value, size_t size);
  std::string* mutable_datavalue();
  std::string* release_datavalue();
  void set_allocated_datavalue(std::string* datavalue);
  private:
  const std::string& _internal_datavalue() const;
  void _internal_set_datavalue(const std::string& value);
  std::string* _internal_mutable_datavalue();
  public:

  // bool boolValue = 14;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // double sum = 15;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  void clear_baseValueOptional();
  BaseValueOptionalCase baseValueOptional_case() const;
  void clear_baseSumOptional();
  BaseSumOptionalCase baseSumOptional_case() const;
  void clear_valueOneof();
  ValueOneofCase valueOneof_case() const;
  void clear_sumOptional();
  SumOptionalCase sumOptional_case() const;
  // @@protoc_insertion_point(class_scope:senml_protobuf.Record)
 private:
  class _Internal;
  void set_has_basevalue();
  void set_has_basesum();
  void set_has_value();
  void set_has_stringvalue();
  void set_has_datavalue();
  void set_has_boolvalue();
  void set_has_sum();

  inline bool has_baseValueOptional() const;
  inline void clear_has_baseValueOptional();

  inline bool has_baseSumOptional() const;
  inline void clear_has_baseSumOptional();

  inline bool has_valueOneof() const;
  inline void clear_has_valueOneof();

  inline bool has_sumOptional() const;
  inline void clear_has_sumOptional();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseunit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  double basetime_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::int32 baseversion_;
  double updatetime_;
  union BaseValueOptionalUnion {
    BaseValueOptionalUnion() {}
    double basevalue_;
  } baseValueOptional_;
  union BaseSumOptionalUnion {
    BaseSumOptionalUnion() {}
    double basesum_;
  } baseSumOptional_;
  union ValueOneofUnion {
    ValueOneofUnion() {}
    double value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringvalue_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datavalue_;
    bool boolvalue_;
  } valueOneof_;
  union SumOptionalUnion {
    SumOptionalUnion() {}
    double sum_;
  } sumOptional_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[4];

  friend struct ::TableStruct_senml_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:senml_protobuf.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "senml_protobuf.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_senml_2eproto);
    return ::descriptor_table_senml_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackFieldNumber = 1,
  };
  // repeated .senml_protobuf.Record pack = 1;
  int pack_size() const;
  private:
  int _internal_pack_size() const;
  public:
  void clear_pack();
  ::senml_protobuf::Record* mutable_pack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senml_protobuf::Record >*
      mutable_pack();
  private:
  const ::senml_protobuf::Record& _internal_pack(int index) const;
  ::senml_protobuf::Record* _internal_add_pack();
  public:
  const ::senml_protobuf::Record& pack(int index) const;
  ::senml_protobuf::Record* add_pack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senml_protobuf::Record >&
      pack() const;

  // @@protoc_insertion_point(class_scope:senml_protobuf.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senml_protobuf::Record > pack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_senml_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Record

// string baseName = 1;
inline void Record::clear_basename() {
  basename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Record::basename() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.baseName)
  return _internal_basename();
}
inline void Record::set_basename(const std::string& value) {
  _internal_set_basename(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.baseName)
}
inline std::string* Record::mutable_basename() {
  // @@protoc_insertion_point(field_mutable:senml_protobuf.Record.baseName)
  return _internal_mutable_basename();
}
inline const std::string& Record::_internal_basename() const {
  return basename_.GetNoArena();
}
inline void Record::_internal_set_basename(const std::string& value) {
  
  basename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Record::set_basename(std::string&& value) {
  
  basename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:senml_protobuf.Record.baseName)
}
inline void Record::set_basename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:senml_protobuf.Record.baseName)
}
inline void Record::set_basename(const char* value, size_t size) {
  
  basename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:senml_protobuf.Record.baseName)
}
inline std::string* Record::_internal_mutable_basename() {
  
  return basename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_basename() {
  // @@protoc_insertion_point(field_release:senml_protobuf.Record.baseName)
  
  return basename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_basename(std::string* basename) {
  if (basename != nullptr) {
    
  } else {
    
  }
  basename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), basename);
  // @@protoc_insertion_point(field_set_allocated:senml_protobuf.Record.baseName)
}

// double baseTime = 2;
inline void Record::clear_basetime() {
  basetime_ = 0;
}
inline double Record::_internal_basetime() const {
  return basetime_;
}
inline double Record::basetime() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.baseTime)
  return _internal_basetime();
}
inline void Record::_internal_set_basetime(double value) {
  
  basetime_ = value;
}
inline void Record::set_basetime(double value) {
  _internal_set_basetime(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.baseTime)
}

// string baseUnit = 3;
inline void Record::clear_baseunit() {
  baseunit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Record::baseunit() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.baseUnit)
  return _internal_baseunit();
}
inline void Record::set_baseunit(const std::string& value) {
  _internal_set_baseunit(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.baseUnit)
}
inline std::string* Record::mutable_baseunit() {
  // @@protoc_insertion_point(field_mutable:senml_protobuf.Record.baseUnit)
  return _internal_mutable_baseunit();
}
inline const std::string& Record::_internal_baseunit() const {
  return baseunit_.GetNoArena();
}
inline void Record::_internal_set_baseunit(const std::string& value) {
  
  baseunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Record::set_baseunit(std::string&& value) {
  
  baseunit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:senml_protobuf.Record.baseUnit)
}
inline void Record::set_baseunit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  baseunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:senml_protobuf.Record.baseUnit)
}
inline void Record::set_baseunit(const char* value, size_t size) {
  
  baseunit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:senml_protobuf.Record.baseUnit)
}
inline std::string* Record::_internal_mutable_baseunit() {
  
  return baseunit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_baseunit() {
  // @@protoc_insertion_point(field_release:senml_protobuf.Record.baseUnit)
  
  return baseunit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_baseunit(std::string* baseunit) {
  if (baseunit != nullptr) {
    
  } else {
    
  }
  baseunit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baseunit);
  // @@protoc_insertion_point(field_set_allocated:senml_protobuf.Record.baseUnit)
}

// int32 baseVersion = 4;
inline void Record::clear_baseversion() {
  baseversion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Record::_internal_baseversion() const {
  return baseversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Record::baseversion() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.baseVersion)
  return _internal_baseversion();
}
inline void Record::_internal_set_baseversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  baseversion_ = value;
}
inline void Record::set_baseversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_baseversion(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.baseVersion)
}

// double baseValue = 5;
inline bool Record::_internal_has_basevalue() const {
  return baseValueOptional_case() == kBaseValue;
}
inline void Record::set_has_basevalue() {
  _oneof_case_[0] = kBaseValue;
}
inline void Record::clear_basevalue() {
  if (_internal_has_basevalue()) {
    baseValueOptional_.basevalue_ = 0;
    clear_has_baseValueOptional();
  }
}
inline double Record::_internal_basevalue() const {
  if (_internal_has_basevalue()) {
    return baseValueOptional_.basevalue_;
  }
  return 0;
}
inline void Record::_internal_set_basevalue(double value) {
  if (!_internal_has_basevalue()) {
    clear_baseValueOptional();
    set_has_basevalue();
  }
  baseValueOptional_.basevalue_ = value;
}
inline double Record::basevalue() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.baseValue)
  return _internal_basevalue();
}
inline void Record::set_basevalue(double value) {
  _internal_set_basevalue(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.baseValue)
}

// double baseSum = 6;
inline bool Record::_internal_has_basesum() const {
  return baseSumOptional_case() == kBaseSum;
}
inline void Record::set_has_basesum() {
  _oneof_case_[1] = kBaseSum;
}
inline void Record::clear_basesum() {
  if (_internal_has_basesum()) {
    baseSumOptional_.basesum_ = 0;
    clear_has_baseSumOptional();
  }
}
inline double Record::_internal_basesum() const {
  if (_internal_has_basesum()) {
    return baseSumOptional_.basesum_;
  }
  return 0;
}
inline void Record::_internal_set_basesum(double value) {
  if (!_internal_has_basesum()) {
    clear_baseSumOptional();
    set_has_basesum();
  }
  baseSumOptional_.basesum_ = value;
}
inline double Record::basesum() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.baseSum)
  return _internal_basesum();
}
inline void Record::set_basesum(double value) {
  _internal_set_basesum(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.baseSum)
}

// string name = 7;
inline void Record::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Record::name() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.name)
  return _internal_name();
}
inline void Record::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.name)
}
inline std::string* Record::mutable_name() {
  // @@protoc_insertion_point(field_mutable:senml_protobuf.Record.name)
  return _internal_mutable_name();
}
inline const std::string& Record::_internal_name() const {
  return name_.GetNoArena();
}
inline void Record::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Record::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:senml_protobuf.Record.name)
}
inline void Record::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:senml_protobuf.Record.name)
}
inline void Record::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:senml_protobuf.Record.name)
}
inline std::string* Record::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_name() {
  // @@protoc_insertion_point(field_release:senml_protobuf.Record.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:senml_protobuf.Record.name)
}

// string unit = 8;
inline void Record::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Record::unit() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.unit)
  return _internal_unit();
}
inline void Record::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.unit)
}
inline std::string* Record::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:senml_protobuf.Record.unit)
  return _internal_mutable_unit();
}
inline const std::string& Record::_internal_unit() const {
  return unit_.GetNoArena();
}
inline void Record::_internal_set_unit(const std::string& value) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Record::set_unit(std::string&& value) {
  
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:senml_protobuf.Record.unit)
}
inline void Record::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:senml_protobuf.Record.unit)
}
inline void Record::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:senml_protobuf.Record.unit)
}
inline std::string* Record::_internal_mutable_unit() {
  
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_unit() {
  // @@protoc_insertion_point(field_release:senml_protobuf.Record.unit)
  
  return unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:senml_protobuf.Record.unit)
}

// double time = 9;
inline void Record::clear_time() {
  time_ = 0;
}
inline double Record::_internal_time() const {
  return time_;
}
inline double Record::time() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.time)
  return _internal_time();
}
inline void Record::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Record::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.time)
}

// double updateTime = 10;
inline void Record::clear_updatetime() {
  updatetime_ = 0;
}
inline double Record::_internal_updatetime() const {
  return updatetime_;
}
inline double Record::updatetime() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.updateTime)
  return _internal_updatetime();
}
inline void Record::_internal_set_updatetime(double value) {
  
  updatetime_ = value;
}
inline void Record::set_updatetime(double value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.updateTime)
}

// double value = 11;
inline bool Record::_internal_has_value() const {
  return valueOneof_case() == kValue;
}
inline void Record::set_has_value() {
  _oneof_case_[2] = kValue;
}
inline void Record::clear_value() {
  if (_internal_has_value()) {
    valueOneof_.value_ = 0;
    clear_has_valueOneof();
  }
}
inline double Record::_internal_value() const {
  if (_internal_has_value()) {
    return valueOneof_.value_;
  }
  return 0;
}
inline void Record::_internal_set_value(double value) {
  if (!_internal_has_value()) {
    clear_valueOneof();
    set_has_value();
  }
  valueOneof_.value_ = value;
}
inline double Record::value() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.value)
  return _internal_value();
}
inline void Record::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.value)
}

// string stringValue = 12;
inline bool Record::_internal_has_stringvalue() const {
  return valueOneof_case() == kStringValue;
}
inline void Record::set_has_stringvalue() {
  _oneof_case_[2] = kStringValue;
}
inline void Record::clear_stringvalue() {
  if (_internal_has_stringvalue()) {
    valueOneof_.stringvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_valueOneof();
  }
}
inline const std::string& Record::stringvalue() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.stringValue)
  return _internal_stringvalue();
}
inline void Record::set_stringvalue(const std::string& value) {
  _internal_set_stringvalue(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.stringValue)
}
inline std::string* Record::mutable_stringvalue() {
  // @@protoc_insertion_point(field_mutable:senml_protobuf.Record.stringValue)
  return _internal_mutable_stringvalue();
}
inline const std::string& Record::_internal_stringvalue() const {
  if (_internal_has_stringvalue()) {
    return valueOneof_.stringvalue_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Record::_internal_set_stringvalue(const std::string& value) {
  if (!_internal_has_stringvalue()) {
    clear_valueOneof();
    set_has_stringvalue();
    valueOneof_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  valueOneof_.stringvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Record::set_stringvalue(std::string&& value) {
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.stringValue)
  if (!_internal_has_stringvalue()) {
    clear_valueOneof();
    set_has_stringvalue();
    valueOneof_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  valueOneof_.stringvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:senml_protobuf.Record.stringValue)
}
inline void Record::set_stringvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_stringvalue()) {
    clear_valueOneof();
    set_has_stringvalue();
    valueOneof_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  valueOneof_.stringvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:senml_protobuf.Record.stringValue)
}
inline void Record::set_stringvalue(const char* value, size_t size) {
  if (!_internal_has_stringvalue()) {
    clear_valueOneof();
    set_has_stringvalue();
    valueOneof_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  valueOneof_.stringvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:senml_protobuf.Record.stringValue)
}
inline std::string* Record::_internal_mutable_stringvalue() {
  if (!_internal_has_stringvalue()) {
    clear_valueOneof();
    set_has_stringvalue();
    valueOneof_.stringvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return valueOneof_.stringvalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_stringvalue() {
  // @@protoc_insertion_point(field_release:senml_protobuf.Record.stringValue)
  if (_internal_has_stringvalue()) {
    clear_has_valueOneof();
    return valueOneof_.stringvalue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Record::set_allocated_stringvalue(std::string* stringvalue) {
  if (has_valueOneof()) {
    clear_valueOneof();
  }
  if (stringvalue != nullptr) {
    set_has_stringvalue();
    valueOneof_.stringvalue_.UnsafeSetDefault(stringvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:senml_protobuf.Record.stringValue)
}

// string dataValue = 13;
inline bool Record::_internal_has_datavalue() const {
  return valueOneof_case() == kDataValue;
}
inline void Record::set_has_datavalue() {
  _oneof_case_[2] = kDataValue;
}
inline void Record::clear_datavalue() {
  if (_internal_has_datavalue()) {
    valueOneof_.datavalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_valueOneof();
  }
}
inline const std::string& Record::datavalue() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.dataValue)
  return _internal_datavalue();
}
inline void Record::set_datavalue(const std::string& value) {
  _internal_set_datavalue(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.dataValue)
}
inline std::string* Record::mutable_datavalue() {
  // @@protoc_insertion_point(field_mutable:senml_protobuf.Record.dataValue)
  return _internal_mutable_datavalue();
}
inline const std::string& Record::_internal_datavalue() const {
  if (_internal_has_datavalue()) {
    return valueOneof_.datavalue_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Record::_internal_set_datavalue(const std::string& value) {
  if (!_internal_has_datavalue()) {
    clear_valueOneof();
    set_has_datavalue();
    valueOneof_.datavalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  valueOneof_.datavalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Record::set_datavalue(std::string&& value) {
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.dataValue)
  if (!_internal_has_datavalue()) {
    clear_valueOneof();
    set_has_datavalue();
    valueOneof_.datavalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  valueOneof_.datavalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:senml_protobuf.Record.dataValue)
}
inline void Record::set_datavalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_datavalue()) {
    clear_valueOneof();
    set_has_datavalue();
    valueOneof_.datavalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  valueOneof_.datavalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:senml_protobuf.Record.dataValue)
}
inline void Record::set_datavalue(const char* value, size_t size) {
  if (!_internal_has_datavalue()) {
    clear_valueOneof();
    set_has_datavalue();
    valueOneof_.datavalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  valueOneof_.datavalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:senml_protobuf.Record.dataValue)
}
inline std::string* Record::_internal_mutable_datavalue() {
  if (!_internal_has_datavalue()) {
    clear_valueOneof();
    set_has_datavalue();
    valueOneof_.datavalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return valueOneof_.datavalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_datavalue() {
  // @@protoc_insertion_point(field_release:senml_protobuf.Record.dataValue)
  if (_internal_has_datavalue()) {
    clear_has_valueOneof();
    return valueOneof_.datavalue_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Record::set_allocated_datavalue(std::string* datavalue) {
  if (has_valueOneof()) {
    clear_valueOneof();
  }
  if (datavalue != nullptr) {
    set_has_datavalue();
    valueOneof_.datavalue_.UnsafeSetDefault(datavalue);
  }
  // @@protoc_insertion_point(field_set_allocated:senml_protobuf.Record.dataValue)
}

// bool boolValue = 14;
inline bool Record::_internal_has_boolvalue() const {
  return valueOneof_case() == kBoolValue;
}
inline void Record::set_has_boolvalue() {
  _oneof_case_[2] = kBoolValue;
}
inline void Record::clear_boolvalue() {
  if (_internal_has_boolvalue()) {
    valueOneof_.boolvalue_ = false;
    clear_has_valueOneof();
  }
}
inline bool Record::_internal_boolvalue() const {
  if (_internal_has_boolvalue()) {
    return valueOneof_.boolvalue_;
  }
  return false;
}
inline void Record::_internal_set_boolvalue(bool value) {
  if (!_internal_has_boolvalue()) {
    clear_valueOneof();
    set_has_boolvalue();
  }
  valueOneof_.boolvalue_ = value;
}
inline bool Record::boolvalue() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.boolValue)
  return _internal_boolvalue();
}
inline void Record::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.boolValue)
}

// double sum = 15;
inline bool Record::_internal_has_sum() const {
  return sumOptional_case() == kSum;
}
inline void Record::set_has_sum() {
  _oneof_case_[3] = kSum;
}
inline void Record::clear_sum() {
  if (_internal_has_sum()) {
    sumOptional_.sum_ = 0;
    clear_has_sumOptional();
  }
}
inline double Record::_internal_sum() const {
  if (_internal_has_sum()) {
    return sumOptional_.sum_;
  }
  return 0;
}
inline void Record::_internal_set_sum(double value) {
  if (!_internal_has_sum()) {
    clear_sumOptional();
    set_has_sum();
  }
  sumOptional_.sum_ = value;
}
inline double Record::sum() const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Record.sum)
  return _internal_sum();
}
inline void Record::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:senml_protobuf.Record.sum)
}

inline bool Record::has_baseValueOptional() const {
  return baseValueOptional_case() != BASEVALUEOPTIONAL_NOT_SET;
}
inline void Record::clear_has_baseValueOptional() {
  _oneof_case_[0] = BASEVALUEOPTIONAL_NOT_SET;
}
inline bool Record::has_baseSumOptional() const {
  return baseSumOptional_case() != BASESUMOPTIONAL_NOT_SET;
}
inline void Record::clear_has_baseSumOptional() {
  _oneof_case_[1] = BASESUMOPTIONAL_NOT_SET;
}
inline bool Record::has_valueOneof() const {
  return valueOneof_case() != VALUEONEOF_NOT_SET;
}
inline void Record::clear_has_valueOneof() {
  _oneof_case_[2] = VALUEONEOF_NOT_SET;
}
inline bool Record::has_sumOptional() const {
  return sumOptional_case() != SUMOPTIONAL_NOT_SET;
}
inline void Record::clear_has_sumOptional() {
  _oneof_case_[3] = SUMOPTIONAL_NOT_SET;
}
inline Record::BaseValueOptionalCase Record::baseValueOptional_case() const {
  return Record::BaseValueOptionalCase(_oneof_case_[0]);
}
inline Record::BaseSumOptionalCase Record::baseSumOptional_case() const {
  return Record::BaseSumOptionalCase(_oneof_case_[1]);
}
inline Record::ValueOneofCase Record::valueOneof_case() const {
  return Record::ValueOneofCase(_oneof_case_[2]);
}
inline Record::SumOptionalCase Record::sumOptional_case() const {
  return Record::SumOptionalCase(_oneof_case_[3]);
}
// -------------------------------------------------------------------

// Message

// repeated .senml_protobuf.Record pack = 1;
inline int Message::_internal_pack_size() const {
  return pack_.size();
}
inline int Message::pack_size() const {
  return _internal_pack_size();
}
inline void Message::clear_pack() {
  pack_.Clear();
}
inline ::senml_protobuf::Record* Message::mutable_pack(int index) {
  // @@protoc_insertion_point(field_mutable:senml_protobuf.Message.pack)
  return pack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senml_protobuf::Record >*
Message::mutable_pack() {
  // @@protoc_insertion_point(field_mutable_list:senml_protobuf.Message.pack)
  return &pack_;
}
inline const ::senml_protobuf::Record& Message::_internal_pack(int index) const {
  return pack_.Get(index);
}
inline const ::senml_protobuf::Record& Message::pack(int index) const {
  // @@protoc_insertion_point(field_get:senml_protobuf.Message.pack)
  return _internal_pack(index);
}
inline ::senml_protobuf::Record* Message::_internal_add_pack() {
  return pack_.Add();
}
inline ::senml_protobuf::Record* Message::add_pack() {
  // @@protoc_insertion_point(field_add:senml_protobuf.Message.pack)
  return _internal_add_pack();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::senml_protobuf::Record >&
Message::pack() const {
  // @@protoc_insertion_point(field_list:senml_protobuf.Message.pack)
  return pack_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace senml_protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_senml_2eproto
