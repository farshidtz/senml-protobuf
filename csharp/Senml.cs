// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: senml.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SenmlProtobuf {

  /// <summary>Holder for reflection information generated from senml.proto</summary>
  public static partial class SenmlReflection {

    #region Descriptor
    /// <summary>File descriptor for senml.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SenmlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtzZW5tbC5wcm90bxIOc2VubWxfcHJvdG9idWYi3wIKBlJlY29yZBIQCghi",
            "YXNlTmFtZRgBIAEoCRIQCghiYXNlVGltZRgCIAEoARIQCghiYXNlVW5pdBgD",
            "IAEoCRITCgtiYXNlVmVyc2lvbhgEIAEoBRITCgliYXNlVmFsdWUYBSABKAFI",
            "ABIRCgdiYXNlU3VtGAYgASgBSAESDAoEbmFtZRgHIAEoCRIMCgR1bml0GAgg",
            "ASgJEgwKBHRpbWUYCSABKAESEgoKdXBkYXRlVGltZRgKIAEoARIPCgV2YWx1",
            "ZRgLIAEoAUgCEhUKC3N0cmluZ1ZhbHVlGAwgASgJSAISEwoJZGF0YVZhbHVl",
            "GA0gASgJSAISEwoJYm9vbFZhbHVlGA4gASgISAISDQoDc3VtGA8gASgBSANC",
            "EwoRYmFzZVZhbHVlT3B0aW9uYWxCEQoPYmFzZVN1bU9wdGlvbmFsQgwKCnZh",
            "bHVlT25lb2ZCDQoLc3VtT3B0aW9uYWwiLwoHTWVzc2FnZRIkCgRwYWNrGAEg",
            "AygLMhYuc2VubWxfcHJvdG9idWYuUmVjb3JkQihaJmdpdGh1Yi5jb20vZmFy",
            "c2hpZHR6L3Nlbm1sLXByb3RvYnVmL2dvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SenmlProtobuf.Record), global::SenmlProtobuf.Record.Parser, new[]{ "BaseName", "BaseTime", "BaseUnit", "BaseVersion", "BaseValue", "BaseSum", "Name", "Unit", "Time", "UpdateTime", "Value", "StringValue", "DataValue", "BoolValue", "Sum" }, new[]{ "BaseValueOptional", "BaseSumOptional", "ValueOneof", "SumOptional" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SenmlProtobuf.Message), global::SenmlProtobuf.Message.Parser, new[]{ "Pack" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SenmlProtobuf.SenmlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      baseName_ = other.baseName_;
      baseTime_ = other.baseTime_;
      baseUnit_ = other.baseUnit_;
      baseVersion_ = other.baseVersion_;
      name_ = other.name_;
      unit_ = other.unit_;
      time_ = other.time_;
      updateTime_ = other.updateTime_;
      switch (other.BaseValueOptionalCase) {
        case BaseValueOptionalOneofCase.BaseValue:
          BaseValue = other.BaseValue;
          break;
      }

      switch (other.BaseSumOptionalCase) {
        case BaseSumOptionalOneofCase.BaseSum:
          BaseSum = other.BaseSum;
          break;
      }

      switch (other.ValueOneofCase) {
        case ValueOneofOneofCase.Value:
          Value = other.Value;
          break;
        case ValueOneofOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofOneofCase.DataValue:
          DataValue = other.DataValue;
          break;
        case ValueOneofOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
      }

      switch (other.SumOptionalCase) {
        case SumOptionalOneofCase.Sum:
          Sum = other.Sum;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "baseName" field.</summary>
    public const int BaseNameFieldNumber = 1;
    private string baseName_ = "";
    /// <summary>
    /// base meta fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseName {
      get { return baseName_; }
      set {
        baseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseTime" field.</summary>
    public const int BaseTimeFieldNumber = 2;
    private double baseTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseTime {
      get { return baseTime_; }
      set {
        baseTime_ = value;
      }
    }

    /// <summary>Field number for the "baseUnit" field.</summary>
    public const int BaseUnitFieldNumber = 3;
    private string baseUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseUnit {
      get { return baseUnit_; }
      set {
        baseUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseVersion" field.</summary>
    public const int BaseVersionFieldNumber = 4;
    private int baseVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseVersion {
      get { return baseVersion_; }
      set {
        baseVersion_ = value;
      }
    }

    /// <summary>Field number for the "baseValue" field.</summary>
    public const int BaseValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseValue {
      get { return baseValueOptionalCase_ == BaseValueOptionalOneofCase.BaseValue ? (double) baseValueOptional_ : 0D; }
      set {
        baseValueOptional_ = value;
        baseValueOptionalCase_ = BaseValueOptionalOneofCase.BaseValue;
      }
    }

    /// <summary>Field number for the "baseSum" field.</summary>
    public const int BaseSumFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseSum {
      get { return baseSumOptionalCase_ == BaseSumOptionalOneofCase.BaseSum ? (double) baseSumOptional_ : 0D; }
      set {
        baseSumOptional_ = value;
        baseSumOptionalCase_ = BaseSumOptionalOneofCase.BaseSum;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    /// meta fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 8;
    private string unit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 9;
    private double time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 10;
    private double updateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return valueOneofCase_ == ValueOneofOneofCase.Value ? (double) valueOneof_ : 0D; }
      set {
        valueOneof_ = value;
        valueOneofCase_ = ValueOneofOneofCase.Value;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueOneofCase_ == ValueOneofOneofCase.StringValue ? (string) valueOneof_ : ""; }
      set {
        valueOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueOneofCase_ = ValueOneofOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "dataValue" field.</summary>
    public const int DataValueFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataValue {
      get { return valueOneofCase_ == ValueOneofOneofCase.DataValue ? (string) valueOneof_ : ""; }
      set {
        valueOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueOneofCase_ = ValueOneofOneofCase.DataValue;
      }
    }

    /// <summary>Field number for the "boolValue" field.</summary>
    public const int BoolValueFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueOneofCase_ == ValueOneofOneofCase.BoolValue ? (bool) valueOneof_ : false; }
      set {
        valueOneof_ = value;
        valueOneofCase_ = ValueOneofOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sum {
      get { return sumOptionalCase_ == SumOptionalOneofCase.Sum ? (double) sumOptional_ : 0D; }
      set {
        sumOptional_ = value;
        sumOptionalCase_ = SumOptionalOneofCase.Sum;
      }
    }

    private object baseValueOptional_;
    /// <summary>Enum of possible cases for the "baseValueOptional" oneof.</summary>
    public enum BaseValueOptionalOneofCase {
      None = 0,
      BaseValue = 5,
    }
    private BaseValueOptionalOneofCase baseValueOptionalCase_ = BaseValueOptionalOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseValueOptionalOneofCase BaseValueOptionalCase {
      get { return baseValueOptionalCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBaseValueOptional() {
      baseValueOptionalCase_ = BaseValueOptionalOneofCase.None;
      baseValueOptional_ = null;
    }

    private object baseSumOptional_;
    /// <summary>Enum of possible cases for the "baseSumOptional" oneof.</summary>
    public enum BaseSumOptionalOneofCase {
      None = 0,
      BaseSum = 6,
    }
    private BaseSumOptionalOneofCase baseSumOptionalCase_ = BaseSumOptionalOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseSumOptionalOneofCase BaseSumOptionalCase {
      get { return baseSumOptionalCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBaseSumOptional() {
      baseSumOptionalCase_ = BaseSumOptionalOneofCase.None;
      baseSumOptional_ = null;
    }

    private object valueOneof_;
    /// <summary>Enum of possible cases for the "valueOneof" oneof.</summary>
    public enum ValueOneofOneofCase {
      None = 0,
      Value = 11,
      StringValue = 12,
      DataValue = 13,
      BoolValue = 14,
    }
    private ValueOneofOneofCase valueOneofCase_ = ValueOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofOneofCase ValueOneofCase {
      get { return valueOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValueOneof() {
      valueOneofCase_ = ValueOneofOneofCase.None;
      valueOneof_ = null;
    }

    private object sumOptional_;
    /// <summary>Enum of possible cases for the "sumOptional" oneof.</summary>
    public enum SumOptionalOneofCase {
      None = 0,
      Sum = 15,
    }
    private SumOptionalOneofCase sumOptionalCase_ = SumOptionalOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SumOptionalOneofCase SumOptionalCase {
      get { return sumOptionalCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSumOptional() {
      sumOptionalCase_ = SumOptionalOneofCase.None;
      sumOptional_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseName != other.BaseName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseTime, other.BaseTime)) return false;
      if (BaseUnit != other.BaseUnit) return false;
      if (BaseVersion != other.BaseVersion) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseValue, other.BaseValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseSum, other.BaseSum)) return false;
      if (Name != other.Name) return false;
      if (Unit != other.Unit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Time, other.Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (StringValue != other.StringValue) return false;
      if (DataValue != other.DataValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
      if (BaseValueOptionalCase != other.BaseValueOptionalCase) return false;
      if (BaseSumOptionalCase != other.BaseSumOptionalCase) return false;
      if (ValueOneofCase != other.ValueOneofCase) return false;
      if (SumOptionalCase != other.SumOptionalCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseName.Length != 0) hash ^= BaseName.GetHashCode();
      if (BaseTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseTime);
      if (BaseUnit.Length != 0) hash ^= BaseUnit.GetHashCode();
      if (BaseVersion != 0) hash ^= BaseVersion.GetHashCode();
      if (baseValueOptionalCase_ == BaseValueOptionalOneofCase.BaseValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseValue);
      if (baseSumOptionalCase_ == BaseSumOptionalOneofCase.BaseSum) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseSum);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Time != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Time);
      if (UpdateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpdateTime);
      if (valueOneofCase_ == ValueOneofOneofCase.Value) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (valueOneofCase_ == ValueOneofOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueOneofCase_ == ValueOneofOneofCase.DataValue) hash ^= DataValue.GetHashCode();
      if (valueOneofCase_ == ValueOneofOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (sumOptionalCase_ == SumOptionalOneofCase.Sum) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sum);
      hash ^= (int) baseValueOptionalCase_;
      hash ^= (int) baseSumOptionalCase_;
      hash ^= (int) valueOneofCase_;
      hash ^= (int) sumOptionalCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseName);
      }
      if (BaseTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BaseTime);
      }
      if (BaseUnit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BaseUnit);
      }
      if (BaseVersion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BaseVersion);
      }
      if (baseValueOptionalCase_ == BaseValueOptionalOneofCase.BaseValue) {
        output.WriteRawTag(41);
        output.WriteDouble(BaseValue);
      }
      if (baseSumOptionalCase_ == BaseSumOptionalOneofCase.BaseSum) {
        output.WriteRawTag(49);
        output.WriteDouble(BaseSum);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Unit);
      }
      if (Time != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Time);
      }
      if (UpdateTime != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(UpdateTime);
      }
      if (valueOneofCase_ == ValueOneofOneofCase.Value) {
        output.WriteRawTag(89);
        output.WriteDouble(Value);
      }
      if (valueOneofCase_ == ValueOneofOneofCase.StringValue) {
        output.WriteRawTag(98);
        output.WriteString(StringValue);
      }
      if (valueOneofCase_ == ValueOneofOneofCase.DataValue) {
        output.WriteRawTag(106);
        output.WriteString(DataValue);
      }
      if (valueOneofCase_ == ValueOneofOneofCase.BoolValue) {
        output.WriteRawTag(112);
        output.WriteBool(BoolValue);
      }
      if (sumOptionalCase_ == SumOptionalOneofCase.Sum) {
        output.WriteRawTag(121);
        output.WriteDouble(Sum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseName);
      }
      if (BaseTime != 0D) {
        size += 1 + 8;
      }
      if (BaseUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseUnit);
      }
      if (BaseVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseVersion);
      }
      if (baseValueOptionalCase_ == BaseValueOptionalOneofCase.BaseValue) {
        size += 1 + 8;
      }
      if (baseSumOptionalCase_ == BaseSumOptionalOneofCase.BaseSum) {
        size += 1 + 8;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Time != 0D) {
        size += 1 + 8;
      }
      if (UpdateTime != 0D) {
        size += 1 + 8;
      }
      if (valueOneofCase_ == ValueOneofOneofCase.Value) {
        size += 1 + 8;
      }
      if (valueOneofCase_ == ValueOneofOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueOneofCase_ == ValueOneofOneofCase.DataValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataValue);
      }
      if (valueOneofCase_ == ValueOneofOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (sumOptionalCase_ == SumOptionalOneofCase.Sum) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      if (other.BaseName.Length != 0) {
        BaseName = other.BaseName;
      }
      if (other.BaseTime != 0D) {
        BaseTime = other.BaseTime;
      }
      if (other.BaseUnit.Length != 0) {
        BaseUnit = other.BaseUnit;
      }
      if (other.BaseVersion != 0) {
        BaseVersion = other.BaseVersion;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Time != 0D) {
        Time = other.Time;
      }
      if (other.UpdateTime != 0D) {
        UpdateTime = other.UpdateTime;
      }
      switch (other.BaseValueOptionalCase) {
        case BaseValueOptionalOneofCase.BaseValue:
          BaseValue = other.BaseValue;
          break;
      }

      switch (other.BaseSumOptionalCase) {
        case BaseSumOptionalOneofCase.BaseSum:
          BaseSum = other.BaseSum;
          break;
      }

      switch (other.ValueOneofCase) {
        case ValueOneofOneofCase.Value:
          Value = other.Value;
          break;
        case ValueOneofOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofOneofCase.DataValue:
          DataValue = other.DataValue;
          break;
        case ValueOneofOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
      }

      switch (other.SumOptionalCase) {
        case SumOptionalOneofCase.Sum:
          Sum = other.Sum;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaseName = input.ReadString();
            break;
          }
          case 17: {
            BaseTime = input.ReadDouble();
            break;
          }
          case 26: {
            BaseUnit = input.ReadString();
            break;
          }
          case 32: {
            BaseVersion = input.ReadInt32();
            break;
          }
          case 41: {
            BaseValue = input.ReadDouble();
            break;
          }
          case 49: {
            BaseSum = input.ReadDouble();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            Unit = input.ReadString();
            break;
          }
          case 73: {
            Time = input.ReadDouble();
            break;
          }
          case 81: {
            UpdateTime = input.ReadDouble();
            break;
          }
          case 89: {
            Value = input.ReadDouble();
            break;
          }
          case 98: {
            StringValue = input.ReadString();
            break;
          }
          case 106: {
            DataValue = input.ReadString();
            break;
          }
          case 112: {
            BoolValue = input.ReadBool();
            break;
          }
          case 121: {
            Sum = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// this contains the senml pack (array of records)
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SenmlProtobuf.SenmlReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      pack_ = other.pack_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "pack" field.</summary>
    public const int PackFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SenmlProtobuf.Record> _repeated_pack_codec
        = pb::FieldCodec.ForMessage(10, global::SenmlProtobuf.Record.Parser);
    private readonly pbc::RepeatedField<global::SenmlProtobuf.Record> pack_ = new pbc::RepeatedField<global::SenmlProtobuf.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SenmlProtobuf.Record> Pack {
      get { return pack_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pack_.Equals(other.pack_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pack_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pack_.WriteTo(output, _repeated_pack_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pack_.CalculateSize(_repeated_pack_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      pack_.Add(other.pack_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pack_.AddEntriesFrom(input, _repeated_pack_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
