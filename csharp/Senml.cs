// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: senml.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SenmlProto {

  /// <summary>Holder for reflection information generated from senml.proto</summary>
  public static partial class SenmlReflection {

    #region Descriptor
    /// <summary>File descriptor for senml.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SenmlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtzZW5tbC5wcm90bxILc2VubWxfcHJvdG8i/AIKBlJlY29yZBIQCghiYXNl",
            "TmFtZRgBIAEoCRIQCghiYXNlVGltZRgCIAEoARIQCghiYXNlVW5pdBgDIAEo",
            "CRITCgtiYXNlVmVyc2lvbhgEIAEoBRIRCgliYXNlVmFsdWUYBSABKAESDwoH",
            "YmFzZVN1bRgGIAEoARIMCgRuYW1lGAcgASgJEgwKBHVuaXQYCCABKAkSDAoE",
            "dGltZRgJIAEoARISCgp1cGRhdGVUaW1lGBAgASgBEg0KBXZhbHVlGAogASgB",
            "EhMKC3N0cmluZ1ZhbHVlGAsgASgJEhEKCWRhdGFWYWx1ZRgMIAEoCRIRCgli",
            "b29sVmFsdWUYDSABKAgSCwoDc3VtGA4gASgBEisKBHR5cGUYDyABKA4yHS5z",
            "ZW5tbF9wcm90by5SZWNvcmQuVmFsdWVUeXBlIkEKCVZhbHVlVHlwZRIJCgVG",
            "TE9BVBAAEgoKBlNUUklORxABEgoKBkJJTkFSWRACEggKBEJPT0wQAxIHCgNT",
            "VU0QBGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SenmlProto.Record), global::SenmlProto.Record.Parser, new[]{ "BaseName", "BaseTime", "BaseUnit", "BaseVersion", "BaseValue", "BaseSum", "Name", "Unit", "Time", "UpdateTime", "Value", "StringValue", "DataValue", "BoolValue", "Sum", "Type" }, null, new[]{ typeof(global::SenmlProto.Record.Types.ValueType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SenmlProto.SenmlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      baseName_ = other.baseName_;
      baseTime_ = other.baseTime_;
      baseUnit_ = other.baseUnit_;
      baseVersion_ = other.baseVersion_;
      baseValue_ = other.baseValue_;
      baseSum_ = other.baseSum_;
      name_ = other.name_;
      unit_ = other.unit_;
      time_ = other.time_;
      updateTime_ = other.updateTime_;
      value_ = other.value_;
      stringValue_ = other.stringValue_;
      dataValue_ = other.dataValue_;
      boolValue_ = other.boolValue_;
      sum_ = other.sum_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "baseName" field.</summary>
    public const int BaseNameFieldNumber = 1;
    private string baseName_ = "";
    /// <summary>
    /// base meta fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseName {
      get { return baseName_; }
      set {
        baseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseTime" field.</summary>
    public const int BaseTimeFieldNumber = 2;
    private double baseTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseTime {
      get { return baseTime_; }
      set {
        baseTime_ = value;
      }
    }

    /// <summary>Field number for the "baseUnit" field.</summary>
    public const int BaseUnitFieldNumber = 3;
    private string baseUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseUnit {
      get { return baseUnit_; }
      set {
        baseUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "baseVersion" field.</summary>
    public const int BaseVersionFieldNumber = 4;
    private int baseVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseVersion {
      get { return baseVersion_; }
      set {
        baseVersion_ = value;
      }
    }

    /// <summary>Field number for the "baseValue" field.</summary>
    public const int BaseValueFieldNumber = 5;
    private double baseValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseValue {
      get { return baseValue_; }
      set {
        baseValue_ = value;
      }
    }

    /// <summary>Field number for the "baseSum" field.</summary>
    public const int BaseSumFieldNumber = 6;
    private double baseSum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double BaseSum {
      get { return baseSum_; }
      set {
        baseSum_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    /// meta fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 8;
    private string unit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 9;
    private double time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "updateTime" field.</summary>
    public const int UpdateTimeFieldNumber = 16;
    private double updateTime_;
    /// <summary>
    /// rarely used
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 10;
    private double value_;
    /// <summary>
    /// value fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "stringValue" field.</summary>
    public const int StringValueFieldNumber = 11;
    private string stringValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return stringValue_; }
      set {
        stringValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dataValue" field.</summary>
    public const int DataValueFieldNumber = 12;
    private string dataValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataValue {
      get { return dataValue_; }
      set {
        dataValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boolValue" field.</summary>
    public const int BoolValueFieldNumber = 13;
    private bool boolValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return boolValue_; }
      set {
        boolValue_ = value;
      }
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 14;
    private double sum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sum {
      get { return sum_; }
      set {
        sum_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 15;
    private global::SenmlProto.Record.Types.ValueType type_ = global::SenmlProto.Record.Types.ValueType.Float;
    /// <summary>
    /// value type indicator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SenmlProto.Record.Types.ValueType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseName != other.BaseName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseTime, other.BaseTime)) return false;
      if (BaseUnit != other.BaseUnit) return false;
      if (BaseVersion != other.BaseVersion) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseValue, other.BaseValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseSum, other.BaseSum)) return false;
      if (Name != other.Name) return false;
      if (Unit != other.Unit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Time, other.Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (StringValue != other.StringValue) return false;
      if (DataValue != other.DataValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseName.Length != 0) hash ^= BaseName.GetHashCode();
      if (BaseTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseTime);
      if (BaseUnit.Length != 0) hash ^= BaseUnit.GetHashCode();
      if (BaseVersion != 0) hash ^= BaseVersion.GetHashCode();
      if (BaseValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseValue);
      if (BaseSum != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseSum);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Time != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Time);
      if (UpdateTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpdateTime);
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (StringValue.Length != 0) hash ^= StringValue.GetHashCode();
      if (DataValue.Length != 0) hash ^= DataValue.GetHashCode();
      if (BoolValue != false) hash ^= BoolValue.GetHashCode();
      if (Sum != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sum);
      if (Type != global::SenmlProto.Record.Types.ValueType.Float) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseName);
      }
      if (BaseTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BaseTime);
      }
      if (BaseUnit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BaseUnit);
      }
      if (BaseVersion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BaseVersion);
      }
      if (BaseValue != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(BaseValue);
      }
      if (BaseSum != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(BaseSum);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Unit);
      }
      if (Time != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Time);
      }
      if (Value != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Value);
      }
      if (StringValue.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(StringValue);
      }
      if (DataValue.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DataValue);
      }
      if (BoolValue != false) {
        output.WriteRawTag(104);
        output.WriteBool(BoolValue);
      }
      if (Sum != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Sum);
      }
      if (Type != global::SenmlProto.Record.Types.ValueType.Float) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Type);
      }
      if (UpdateTime != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(UpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseName);
      }
      if (BaseTime != 0D) {
        size += 1 + 8;
      }
      if (BaseUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseUnit);
      }
      if (BaseVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseVersion);
      }
      if (BaseValue != 0D) {
        size += 1 + 8;
      }
      if (BaseSum != 0D) {
        size += 1 + 8;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Time != 0D) {
        size += 1 + 8;
      }
      if (UpdateTime != 0D) {
        size += 2 + 8;
      }
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (StringValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (DataValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataValue);
      }
      if (BoolValue != false) {
        size += 1 + 1;
      }
      if (Sum != 0D) {
        size += 1 + 8;
      }
      if (Type != global::SenmlProto.Record.Types.ValueType.Float) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      if (other.BaseName.Length != 0) {
        BaseName = other.BaseName;
      }
      if (other.BaseTime != 0D) {
        BaseTime = other.BaseTime;
      }
      if (other.BaseUnit.Length != 0) {
        BaseUnit = other.BaseUnit;
      }
      if (other.BaseVersion != 0) {
        BaseVersion = other.BaseVersion;
      }
      if (other.BaseValue != 0D) {
        BaseValue = other.BaseValue;
      }
      if (other.BaseSum != 0D) {
        BaseSum = other.BaseSum;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Time != 0D) {
        Time = other.Time;
      }
      if (other.UpdateTime != 0D) {
        UpdateTime = other.UpdateTime;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.StringValue.Length != 0) {
        StringValue = other.StringValue;
      }
      if (other.DataValue.Length != 0) {
        DataValue = other.DataValue;
      }
      if (other.BoolValue != false) {
        BoolValue = other.BoolValue;
      }
      if (other.Sum != 0D) {
        Sum = other.Sum;
      }
      if (other.Type != global::SenmlProto.Record.Types.ValueType.Float) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaseName = input.ReadString();
            break;
          }
          case 17: {
            BaseTime = input.ReadDouble();
            break;
          }
          case 26: {
            BaseUnit = input.ReadString();
            break;
          }
          case 32: {
            BaseVersion = input.ReadInt32();
            break;
          }
          case 41: {
            BaseValue = input.ReadDouble();
            break;
          }
          case 49: {
            BaseSum = input.ReadDouble();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            Unit = input.ReadString();
            break;
          }
          case 73: {
            Time = input.ReadDouble();
            break;
          }
          case 81: {
            Value = input.ReadDouble();
            break;
          }
          case 90: {
            StringValue = input.ReadString();
            break;
          }
          case 98: {
            DataValue = input.ReadString();
            break;
          }
          case 104: {
            BoolValue = input.ReadBool();
            break;
          }
          case 113: {
            Sum = input.ReadDouble();
            break;
          }
          case 120: {
            Type = (global::SenmlProto.Record.Types.ValueType) input.ReadEnum();
            break;
          }
          case 129: {
            UpdateTime = input.ReadDouble();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Record message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ValueType {
        [pbr::OriginalName("FLOAT")] Float = 0,
        [pbr::OriginalName("STRING")] String = 1,
        [pbr::OriginalName("BINARY")] Binary = 2,
        [pbr::OriginalName("BOOL")] Bool = 3,
        [pbr::OriginalName("SUM")] Sum = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
