<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: senml.proto

namespace Senml_proto\Record;

use UnexpectedValueException;

/**
 * Protobuf type <code>senml_proto.Record.ValueType</code>
 */
class ValueType
{
    /**
     * Generated from protobuf enum <code>FLOAT = 0;</code>
     */
    const FLOAT = 0;
    /**
     * Generated from protobuf enum <code>STRING = 1;</code>
     */
    const STRING = 1;
    /**
     * Generated from protobuf enum <code>BINARY = 2;</code>
     */
    const BINARY = 2;
    /**
     * Generated from protobuf enum <code>BOOL = 3;</code>
     */
    const BOOL = 3;
    /**
     * Generated from protobuf enum <code>SUM = 4;</code>
     */
    const SUM = 4;

    private static $valueToName = [
        self::FLOAT => 'FLOAT',
        self::STRING => 'STRING',
        self::BINARY => 'BINARY',
        self::BOOL => 'BOOL',
        self::SUM => 'SUM',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ValueType::class, \Senml_proto\Record_ValueType::class);

