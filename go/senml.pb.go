// Code generated by protoc-gen-go. DO NOT EDIT.
// source: senml.proto

package senml_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Record_ValueType int32

const (
	Record_FLOAT  Record_ValueType = 0
	Record_STRING Record_ValueType = 1
	Record_BINARY Record_ValueType = 2
	Record_BOOL   Record_ValueType = 3
	Record_SUM    Record_ValueType = 4
)

var Record_ValueType_name = map[int32]string{
	0: "FLOAT",
	1: "STRING",
	2: "BINARY",
	3: "BOOL",
	4: "SUM",
}

var Record_ValueType_value = map[string]int32{
	"FLOAT":  0,
	"STRING": 1,
	"BINARY": 2,
	"BOOL":   3,
	"SUM":    4,
}

func (x Record_ValueType) String() string {
	return proto.EnumName(Record_ValueType_name, int32(x))
}

func (Record_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d2d574953ec1dc46, []int{0, 0}
}

type Record struct {
	// base meta fields
	BaseName    string  `protobuf:"bytes,1,opt,name=baseName,proto3" json:"baseName,omitempty"`
	BaseTime    float64 `protobuf:"fixed64,2,opt,name=baseTime,proto3" json:"baseTime,omitempty"`
	BaseUnit    string  `protobuf:"bytes,3,opt,name=baseUnit,proto3" json:"baseUnit,omitempty"`
	BaseVersion int32   `protobuf:"varint,4,opt,name=baseVersion,proto3" json:"baseVersion,omitempty"`
	BaseValue   float64 `protobuf:"fixed64,5,opt,name=baseValue,proto3" json:"baseValue,omitempty"`
	BaseSum     float64 `protobuf:"fixed64,6,opt,name=baseSum,proto3" json:"baseSum,omitempty"`
	// meta fields
	Name       string  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Unit       string  `protobuf:"bytes,8,opt,name=unit,proto3" json:"unit,omitempty"`
	Time       float64 `protobuf:"fixed64,9,opt,name=time,proto3" json:"time,omitempty"`
	UpdateTime float64 `protobuf:"fixed64,16,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// value fields
	Value                float64          `protobuf:"fixed64,10,opt,name=value,proto3" json:"value,omitempty"`
	StringValue          string           `protobuf:"bytes,11,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
	DataValue            string           `protobuf:"bytes,12,opt,name=dataValue,proto3" json:"dataValue,omitempty"`
	BoolValue            bool             `protobuf:"varint,13,opt,name=boolValue,proto3" json:"boolValue,omitempty"`
	Sum                  float64          `protobuf:"fixed64,14,opt,name=sum,proto3" json:"sum,omitempty"`
	Type                 Record_ValueType `protobuf:"varint,15,opt,name=type,proto3,enum=senml_proto.Record_ValueType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2d574953ec1dc46, []int{0}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetBaseName() string {
	if m != nil {
		return m.BaseName
	}
	return ""
}

func (m *Record) GetBaseTime() float64 {
	if m != nil {
		return m.BaseTime
	}
	return 0
}

func (m *Record) GetBaseUnit() string {
	if m != nil {
		return m.BaseUnit
	}
	return ""
}

func (m *Record) GetBaseVersion() int32 {
	if m != nil {
		return m.BaseVersion
	}
	return 0
}

func (m *Record) GetBaseValue() float64 {
	if m != nil {
		return m.BaseValue
	}
	return 0
}

func (m *Record) GetBaseSum() float64 {
	if m != nil {
		return m.BaseSum
	}
	return 0
}

func (m *Record) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Record) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Record) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Record) GetUpdateTime() float64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Record) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Record) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *Record) GetDataValue() string {
	if m != nil {
		return m.DataValue
	}
	return ""
}

func (m *Record) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *Record) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *Record) GetType() Record_ValueType {
	if m != nil {
		return m.Type
	}
	return Record_FLOAT
}

func init() {
	proto.RegisterEnum("senml_proto.Record_ValueType", Record_ValueType_name, Record_ValueType_value)
	proto.RegisterType((*Record)(nil), "senml_proto.Record")
}

func init() { proto.RegisterFile("senml.proto", fileDescriptor_d2d574953ec1dc46) }

var fileDescriptor_d2d574953ec1dc46 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcd, 0x4a, 0xfb, 0x40,
	0x14, 0xc5, 0xff, 0xd3, 0x7c, 0x34, 0xb9, 0xfd, 0x5b, 0x87, 0x8b, 0x8b, 0x41, 0x54, 0x42, 0x57,
	0x59, 0x05, 0xd4, 0x27, 0x68, 0x17, 0x4a, 0xa1, 0xb6, 0x30, 0x4d, 0x05, 0x57, 0x92, 0xda, 0x41,
	0x02, 0xcd, 0x07, 0xc9, 0x44, 0xe8, 0x4b, 0xf8, 0xcc, 0x32, 0x77, 0x68, 0x93, 0xdd, 0x39, 0xbf,
	0x93, 0x9b, 0x7b, 0x2e, 0x03, 0x93, 0x56, 0x95, 0xc5, 0x31, 0xa9, 0x9b, 0x4a, 0x57, 0x68, 0xcd,
	0x27, 0x99, 0xd9, 0xaf, 0x0b, 0xbe, 0x54, 0x5f, 0x55, 0x73, 0xc0, 0x5b, 0x08, 0xf6, 0x59, 0xab,
	0xd6, 0x59, 0xa1, 0x04, 0x8b, 0x58, 0x1c, 0xca, 0x8b, 0x3f, 0x67, 0x69, 0x5e, 0x28, 0x31, 0x8a,
	0x58, 0xcc, 0xe4, 0xc5, 0x9f, 0xb3, 0x5d, 0x99, 0x6b, 0xe1, 0xf4, 0x73, 0xc6, 0x63, 0x04, 0x13,
	0xa3, 0xdf, 0x55, 0xd3, 0xe6, 0x55, 0x29, 0xdc, 0x88, 0xc5, 0x9e, 0x1c, 0x22, 0xbc, 0x83, 0x90,
	0x6c, 0x76, 0xec, 0x94, 0xf0, 0xe8, 0xd7, 0x3d, 0x40, 0x01, 0x63, 0x63, 0xb6, 0x5d, 0x21, 0x7c,
	0xca, 0xce, 0x16, 0x11, 0xdc, 0xd2, 0x34, 0x1d, 0xd3, 0x46, 0xd2, 0x86, 0x75, 0xa6, 0x45, 0x60,
	0x99, 0xd1, 0x86, 0x69, 0xd3, 0x3a, 0xa4, 0x71, 0xd2, 0xf8, 0x00, 0xd0, 0xd5, 0x87, 0x4c, 0xdb,
	0x7b, 0x38, 0x25, 0x03, 0x82, 0x37, 0xe0, 0xfd, 0x50, 0x1f, 0xa0, 0xc8, 0x1a, 0x73, 0x4b, 0xab,
	0x9b, 0xbc, 0xfc, 0xb6, 0x5d, 0x27, 0xb4, 0x64, 0x88, 0xcc, 0x2d, 0x87, 0x4c, 0x67, 0x36, 0xff,
	0x4f, 0x79, 0x0f, 0xe8, 0xd2, 0xaa, 0x3a, 0xda, 0xf4, 0x2a, 0x62, 0x71, 0x20, 0x7b, 0x80, 0x1c,
	0x9c, 0xb6, 0x2b, 0xc4, 0x94, 0x36, 0x1a, 0x89, 0x8f, 0xe0, 0xea, 0x53, 0xad, 0xc4, 0x75, 0xc4,
	0xe2, 0xe9, 0xd3, 0x7d, 0x32, 0x78, 0xb6, 0xc4, 0x3e, 0x59, 0x42, 0xa3, 0xe9, 0xa9, 0x56, 0x92,
	0x3e, 0x9d, 0xcd, 0x21, 0xbc, 0x20, 0x0c, 0xc1, 0x7b, 0x59, 0x6d, 0xe6, 0x29, 0xff, 0x87, 0x00,
	0xfe, 0x36, 0x95, 0xcb, 0xf5, 0x2b, 0x67, 0x46, 0x2f, 0x96, 0xeb, 0xb9, 0xfc, 0xe0, 0x23, 0x0c,
	0xc0, 0x5d, 0x6c, 0x36, 0x2b, 0xee, 0xe0, 0x18, 0x9c, 0xed, 0xee, 0x8d, 0xbb, 0x7b, 0x9f, 0x16,
	0x3c, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x0a, 0x8b, 0x19, 0x33, 0x02, 0x00, 0x00,
}
